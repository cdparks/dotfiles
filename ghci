-- Disable at the command line with -ignore-dot-ghci

-- Extensions to deriving
:set -XDeriveDataTypeable
:set -XDeriveFoldable
:set -XDeriveFunctor
:set -XDeriveGeneric
:set -XDeriveTraversable
:set -XDerivingStrategies
:set -XStandaloneDeriving

-- Extensions to type classes
:set -XFlexibleContexts
:set -XFlexibleInstances
:set -XFunctionalDependencies
:set -XMultiParamTypeClasses

-- Purely syntactic
:set -XKindSignatures
:set -XLambdaCase
:set -XMultiWayIf
:set -XTupleSections
:set -XTypeOperators

-- Fancier types
:set -XDataKinds
:set -XExistentialQuantification
:set -XGADTs
:set -XPolyKinds
:set -XRankNTypes
:set -XScopedTypeVariables
:set -XTypeApplications
:set -XTypeFamilies
:set -XTypeFamilyDependencies

-- Dangerous in general, but almost always useful for Text, ByteString
:set -XOverloadedStrings

-- Purple prompt and multiline input
:set +m
:set prompt "\ESC[1;35m> \ESC[m"
:set prompt-cont "\ESC[1;35m| \ESC[m"

-- Almost always need these
import Prelude
import Control.Applicative
import Control.Monad
import Data.Bits
import Data.Foldable
import Data.Function ((&), fix, on)
import Data.Functor.Const (Const(..))
import Data.Functor.Identity (Identity(..))
import Data.Int
import Data.List.NonEmpty (NonEmpty(..), (<|))
import Data.List (sort, sortOn, sortBy)
import Data.Map.Strict (Map)
import Data.Proxy
import Data.Set (Set)
import Data.Traversable
import Data.Word
import GHC.Generics (Generic)
import qualified Data.List.NonEmpty as NE
import qualified Data.Map.Strict as Map
import qualified Data.Set as Set

-- Add extra definitions here

-- e.g. the @Double 4
:{
the :: forall a. a -> a
the a = a
:}

-- Print integers in binary and hexidecimal
import Numeric (showIntAtBase)
import Data.Char (intToDigit)
import Data.Bits (FiniteBits(..))

:{
hexP :: forall a. (FiniteBits a, Integral a, Show a) => a -> String
hexP = ("0x" <>) . baseP 16

hex :: forall a. (Integral a, Show a) => a -> String
hex = ("0x" <>) . base 0 16

binP :: forall a. (FiniteBits a, Integral a, Show a) => a -> String
binP = ("0b" <>) . baseP 2

bin :: forall a. (FiniteBits a, Integral a, Show a) => a -> String
bin = ("0b" <>) . base 0 2

baseP :: forall a. (FiniteBits a, Integral a, Show a) => a -> a -> String
baseP = base $ finiteBitSize (0 :: a)

base:: forall a. (Integral a, Show a) => Int -> a -> a -> String
base maxBits b i = prefix <> s
 where
  s = showIntAtBase b intToDigit i ""
  prefix = replicate (len - length s) '0'
  len = maxBits `div` (fromIntegral b `div` 2)
:}

-- Show instance for function that also shows monomorphized type with defaulting
instance Show (a -> b) where
  showsPrec _ _ = showString "<function>"

-- Basic lens w/o dependencies
type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Lens' s a = Lens s s a a

type Getting r s a = (a -> Const r a) -> s -> Const r s
type ASetter s t a b = (a -> Identity b) -> s -> Identity t

:{
lens :: (s -> a) -> (s -> b -> t) -> Lens s t a b
lens sa sbt afb s = sbt s <$> afb (sa s)

view :: Getting a s a -> s -> a
view l = getConst . l Const

infixl 8 ^.
(^.) :: s -> Getting a s a -> a
(^.) = flip view

over :: ASetter s t a b -> (a -> b) -> s -> t
over l f = runIdentity . l (Identity . f)

infixr 4 %~
(%~) :: ASetter s t a b -> (a -> b) -> s -> t
(%~) = over

set :: ASetter s t a b -> b -> s -> t
set l = over l . const

infixr 4 .~
(.~) :: ASetter s t a b -> b -> s -> t
(.~) = set

infixr 4 ?~
(?~) :: ASetter s t a (Maybe b) -> b -> s -> t
l ?~ b = l .~ Just b
:}

-- All warnings
:set -Wall

-- Add more information to types
-- :set -fprint-explicit-foralls
-- :set -fprint-explicit-runtime-reps
-- :set -fprint-explicit-kinds
-- :set -fprint-unicode-syntax

-- Show type (keep this last to avoid printing defs above)
:set +t
